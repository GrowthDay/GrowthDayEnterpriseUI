on:
  push:
    branches:
      - dev
      - uat
    tags:
      - 'v*'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-18.04
    environment: AWS
    steps:
      # Action environment set up
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      # Setting up .env file
      - name: Try Setup Dev Environment File
        if: startsWith(github.ref, 'refs/heads/dev') == true
        run: |
          echo "REACT_APP_ENV=dev" >> .env
          echo "BUILD_NUMBER=${{ github.run_id }}" >> .env
          echo "TS_COMPILE_ON_ERROR=true" >> .env
          echo "GENERATE_SOURCEMAP=false" >> .env
      - name: Try Setup UAT Environment File
        if: startsWith(github.ref, 'refs/heads/uat') == true
        run: |
          echo "REACT_APP_ENV=uat" >> .env
          echo "BUILD_NUMBER=${{ github.run_id }}" >> .env
          echo "TS_COMPILE_ON_ERROR=true" >> .env
          echo "GENERATE_SOURCEMAP=false" >> .env
      - name: Try Setup Production Environment File
        if: startsWith(github.ref, 'refs/tags/v') == true
        run: |
          echo "REACT_APP_ENV=prod" >> .env
          echo "BUILD_NUMBER=${{ github.run_id }}" >> .env
          echo "TS_COMPILE_ON_ERROR=true" >> .env
          echo "GENERATE_SOURCEMAP=false" >> .env

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install npm dependencies
      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      # Build react app
      - name: Build
        run: yarn build

      # Create version html for debugging
      - name: Create Version HTML
        run: |
          echo "${GITHUB_REF##*/}-${GITHUB_SHA::7}" > version.html
          cp -rf version.html ./build

      # Upload zip artifact to S3
      - uses: chrislennon/action-aws-cli@v1.1
      - name: Try Upload to Dev S3
        if: startsWith(github.ref, 'refs/heads/dev') == true
        run: |
          aws s3 cp s3://growth-day-enterprise-dev/index.html s3://growth-day-enterprise-dev/index-old-${{ github.run_id }}.html
          aws s3 cp ./build s3://growth-day-enterprise-dev --recursive --acl public-read --cache-control 'max-age=604800'
          aws s3 cp ./build/index.html s3://growth-day-enterprise-dev/index.html --acl public-read --cache-control 'no-cache'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Try Upload to UAT S3
        if: startsWith(github.ref, 'refs/heads/uat') == true
        run: |
          aws s3 cp s3://growth-day-enterprise-uat/index.html s3://growth-day-enterprise-uat/index-old-${{ github.run_id }}.html
          aws s3 cp ./build s3://growth-day-enterprise-uat --recursive --acl public-read --cache-control 'max-age=604800'
          aws s3 cp ./build/index.html s3://growth-day-enterprise-uat/index.html --acl public-read --cache-control 'no-cache'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Try Upload to Production S3
        if: startsWith(github.ref, 'refs/tags/v') == true
        run: |
          aws s3 cp s3://growth-day-enterprise-prod/index.html s3://growth-day-enterprise-prod/index-old-${{ github.run_id }}.html
          aws s3 cp ./build s3://growth-day-enterprise-prod --recursive --acl public-read --cache-control 'max-age=604800'
          aws s3 cp ./build/index.html s3://growth-day-enterprise-prod/index.html --acl public-read --cache-control 'no-cache'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #Slack notifications
      - name: Slack Notification for Dev
        if: startsWith(github.ref, 'refs/heads/dev') == true
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_DEV_SLACK_WEBHOOK }}
          SLACK_ICON: https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/240px-Octicons-mark-github.svg.png
          SLACK_USERNAME: GitHub
          SLACK_TITLE: Enterprise UI
      - name: Slack Notification for UAT
        if: startsWith(github.ref, 'refs/heads/uat') == true
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_UAT_SLACK_WEBHOOK }}
          SLACK_ICON: https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/240px-Octicons-mark-github.svg.png
          SLACK_USERNAME: GitHub
          SLACK_TITLE: Enterprise UI
      - name: Slack Notification for Production
        if: startsWith(github.ref, 'refs/tags/v') == true
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_PROD_SLACK_WEBHOOK }}
          SLACK_ICON: https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/240px-Octicons-mark-github.svg.png
          SLACK_USERNAME: GitHub
          SLACK_TITLE: Enterprise UI
